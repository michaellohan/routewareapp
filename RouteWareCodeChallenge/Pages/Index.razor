@page "/"

@using RouteWareCodeChallenge.Data
@inject AddressService AddressService

<input @bind-value="SearchTerm" @bind-value:event="oninput" placeholder="Search by Address" />

<span class="text-muted ml-5">
    Showing @GetAddressList().Count out of @allAddresses.Count

</span>
@if (showNearestAddresses)
{
    <div>
        Showing 10 nearest addresses!
    </div>
}
    <table id="addressTable" class="table  table-hover table-bordered table-sm">
        <thead>
            <tr>
                <th>Row</th>
                <th>Address</th>
                <th>City</th>
                <th>State</th>
                <th>Zip</th>
                <th>Latitude</th>
                <th>Longitude</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var address in GetAddressList())
            {
                <tr @onclick="() => TrClickedAtIndex(address.Latitude, address.Longitude)">
                    <td>@address.RowNumber</td>
                    <td>@address.Street</td>
                    <td>@address.City</td>
                    <td>@address.State</td>
                    <td>@address.Zip</td>
                    <td>@address.Latitude</td>
                    <td>@address.Longitude</td>
                </tr>
            }
        </tbody>
    </table>
@if (GetAddressList().Count >= 20)
{
    <div class="pagination">
        <button class="btn btn-custom" @onclick=@(async () => await NavigateToPage("previous"))>Prev</button>
        @for (int i = startPage; i <= endPage; i++)
        {
            var currentPage = i;
            <button class="btn btn-custom pagebutton @(currentPage == curPage ? "btn-danger" : "")" @onclick=@(async () => await RefreshRecords(currentPage))>
                @currentPage
            </button>
        }
        <button class="btn btn-custom" @onclick=@(async () => await NavigateToPage("next"))>Next</button>
    </div>

}
else
{
    <div>

        <button class="btn btn-primary" @onclick="RefreshResults">
            Refresh Results
        </button>

    </div>
}

@code{
    //setup
    List<Address> allAddresses = new List<Address>();
    List<Address> pageOfAddresses = new List<Address>();
    List<Address> searchedAddresses => allAddresses.Where(i => i.Street.ToLower().Contains(SearchTerm.ToLower())).ToList();
    public List<Address> nearestAddresses = new List<Address>();
    public string SearchTerm { get; set; } = "";
    bool showNearestAddresses;

    //paginitation stuff
    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;



    private void ReadExcel()
    {
        allAddresses = AddressService.GetAddressesFromCSVFile();
    }

    private List<Address> GetAddressList()
    {
        // if row is clicked return nearest address list
        if (showNearestAddresses)
        {
            return nearestAddresses;
        }

        // if search term is not empty return search list
        if (!String.IsNullOrEmpty(SearchTerm))
        {
            return searchedAddresses;
        }

        //else return page
        return pageOfAddresses;
    }

    public void TrClickedAtIndex(Decimal Latitude, Decimal Longitude)
    {
        nearestAddresses = AddressService.GetNearestAddresses(10, Latitude, Longitude);
        showNearestAddresses = true;
    }

    private void RefreshResults()
    {
        showNearestAddresses = false;
        SearchTerm = String.Empty;
    }

    protected override void OnInitialized()
    {
        if (allAddresses == null || allAddresses.Count == 0)
        {
            ReadExcel();
        }

        //pager stuff
        pagerSize = 20;
        pageSize = 20;
        curPage = 1;
        pageOfAddresses = AddressService.GetSelectionOfAddresses((curPage - 1) * pageSize, pageSize);
        totalRecords = allAddresses.Count();
        totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
        SetPagerSize("forward");

    }

    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        await RefreshRecords(curPage);
    }
    public async Task SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
    }

    public async Task RefreshRecords(int currentPage)
    {
        //get correct selection
        pageOfAddresses = AddressService.GetSelectionOfAddresses((curPage - 1) * pageSize, pageSize);
        curPage = currentPage;
        this.StateHasChanged();
    }

}