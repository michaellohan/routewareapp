#pragma checksum "C:\GIT\RouteWareCodeChallenge\RouteWareCodeChallenge\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3086b8d1bf2a5971ad7e55bbeb3b9388923495a9"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace RouteWareCodeChallenge.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\GIT\RouteWareCodeChallenge\RouteWareCodeChallenge\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\GIT\RouteWareCodeChallenge\RouteWareCodeChallenge\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\GIT\RouteWareCodeChallenge\RouteWareCodeChallenge\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\GIT\RouteWareCodeChallenge\RouteWareCodeChallenge\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\GIT\RouteWareCodeChallenge\RouteWareCodeChallenge\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\GIT\RouteWareCodeChallenge\RouteWareCodeChallenge\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\GIT\RouteWareCodeChallenge\RouteWareCodeChallenge\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\GIT\RouteWareCodeChallenge\RouteWareCodeChallenge\_Imports.razor"
using RouteWareCodeChallenge;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\GIT\RouteWareCodeChallenge\RouteWareCodeChallenge\_Imports.razor"
using RouteWareCodeChallenge.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\GIT\RouteWareCodeChallenge\RouteWareCodeChallenge\Pages\Index.razor"
using RouteWareCodeChallenge.Data;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 71 "C:\GIT\RouteWareCodeChallenge\RouteWareCodeChallenge\Pages\Index.razor"
      
    //setup
    List<Address> allAddresses = new List<Address>();
    List<Address> pageOfAddresses = new List<Address>();
    List<Address> searchedAddresses => allAddresses.Where(i => i.Street.ToLower().Contains(SearchTerm.ToLower())).ToList();
    public List<Address> nearestAddresses = new List<Address>();
    public string SearchTerm { get; set; } = "";
    bool showNearestAddresses;

    //paginitation stuff
    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;



    private void ReadExcel()
    {
        allAddresses = AddressService.GetAddressesFromCSVFile();
    }

    private List<Address> GetAddressList()
    {
        // if row is clicked return nearest address list
        if (showNearestAddresses)
        {
            return nearestAddresses;
        }

        // if search term is not empty return search list
        if (!String.IsNullOrEmpty(SearchTerm))
        {
            return searchedAddresses;
        }

        //else return page
        return pageOfAddresses;
    }

    public void TrClickedAtIndex(Decimal Latitude, Decimal Longitude)
    {
        nearestAddresses = AddressService.GetNearestAddresses(10, Latitude, Longitude);
        showNearestAddresses = true;
    }

    private void RefreshResults()
    {
        showNearestAddresses = false;
        SearchTerm = String.Empty;
    }

    protected override void OnInitialized()
    {
        if (allAddresses == null || allAddresses.Count == 0)
        {
            ReadExcel();
        }

        //pager stuff
        pagerSize = 20;
        pageSize = 20;
        curPage = 1;
        pageOfAddresses = AddressService.GetSelectionOfAddresses((curPage - 1) * pageSize, pageSize);
        totalRecords = allAddresses.Count();
        totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
        SetPagerSize("forward");

    }

    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        await RefreshRecords(curPage);
    }
    public async Task SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
    }

    public async Task RefreshRecords(int currentPage)
    {
        //get correct selection
        pageOfAddresses = AddressService.GetSelectionOfAddresses((currentPage - 1) * pageSize, pageSize);
        curPage = currentPage;
        this.StateHasChanged();
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AddressService AddressService { get; set; }
    }
}
#pragma warning restore 1591
